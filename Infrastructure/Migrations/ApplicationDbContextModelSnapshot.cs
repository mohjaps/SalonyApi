// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ReqqaDBUser")
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.TableDb.ApplicationDbUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("FK_BranchID")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PointsBalance")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TempPaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("activeCode")
                        .HasColumnType("bit");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("addressName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("certificatePhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("closeNotification")
                        .HasColumnType("bit");

                    b.Property<string>("code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("iDPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ibanNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("invitationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("lang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("registerDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("sendCodeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("showPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("stableWallet")
                        .HasColumnType("float");

                    b.Property<int>("typeUser")
                        .HasColumnType("int");

                    b.Property<double>("userWallet")
                        .HasColumnType("float");

                    b.Property<double>("wallet")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Core.TableDb.Appointment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("SallonID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("SallonID");

                    b.HasIndex("UserID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Core.TableDb.BankAccounts", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_BranchID")
                        .HasColumnType("int");

                    b.Property<string>("OwnerNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bankAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bankNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bankNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("Core.TableDb.Branches", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("nameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Core.TableDb.Carts", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_SubServiceID")
                        .HasColumnType("int");

                    b.Property<string>("FK_UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Fk_EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FK_SubServiceID");

                    b.HasIndex("FK_UserID");

                    b.HasIndex("Fk_EmployeeID");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Core.TableDb.Categories", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_BranchID")
                        .HasColumnType("int");

                    b.Property<string>("img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("nameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Core.TableDb.Cities", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_BranchID")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("nameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Core.TableDb.ContactUs", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FK_BranchID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("Core.TableDb.Copons", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_Branch")
                        .HasColumnType("int");

                    b.Property<string>("code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("discPercentage")
                        .HasColumnType("float");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("Copons");
                });

            modelBuilder.Entity("Core.TableDb.DeviceIds", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FK_UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("deviceID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FK_UserID");

                    b.ToTable("DeviceIds");
                });

            modelBuilder.Entity("Core.TableDb.Districts", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_CityID")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("nameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FK_CityID");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Core.TableDb.Employees", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_ProviderAdditionalDataID")
                        .HasColumnType("int");

                    b.Property<int>("FK_SubServiceID")
                        .HasColumnType("int");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FK_ProviderAdditionalDataID");

                    b.HasIndex("FK_SubServiceID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Core.TableDb.FinancialAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FkProviderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<double>("PayOutPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FkProviderId");

                    b.ToTable("FinancialAccount");
                });

            modelBuilder.Entity("Core.TableDb.HistoryNotify", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FKUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FKUser");

                    b.ToTable("HistoryNotify");
                });

            modelBuilder.Entity("Core.TableDb.MainServices", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_BranchID")
                        .HasColumnType("int");

                    b.Property<int?>("FK_CategoryID")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("nameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FK_CategoryID");

                    b.ToTable("MainServices");
                });

            modelBuilder.Entity("Core.TableDb.Messages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateSend")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("FK_OrderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeletedReceiver")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeletedSender")
                        .HasColumnType("bit");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ReceiverSeen")
                        .HasColumnType("bit");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("SenderSeen")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeMessage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_OrderId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Core.TableDb.Notifications", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FK_OrderID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("FK_UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("msgAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("msgEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("show")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("FK_OrderID");

                    b.HasIndex("FK_UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Core.TableDb.Offers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_ProviderAdditionalDataID")
                        .HasColumnType("int");

                    b.Property<string>("img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("nameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FK_ProviderAdditionalDataID");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("Core.TableDb.OrderServices", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FK_OrderID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubServicNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubServicNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubServiceID")
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<double>("deliveryPrice")
                        .HasColumnType("float");

                    b.Property<double>("duration")
                        .HasColumnType("float");

                    b.Property<string>("lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("mainServiceID")
                        .HasColumnType("int");

                    b.Property<string>("mainServiceNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mainServiceNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<double>("priceAtHome")
                        .HasColumnType("float");

                    b.Property<double>("taxOfHome")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("FK_OrderID");

                    b.ToTable("OrderServices");
                });

            modelBuilder.Entity("Core.TableDb.Orders", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Adminpercentage")
                        .HasColumnType("float");

                    b.Property<double>("AppCommission")
                        .HasColumnType("float");

                    b.Property<bool>("ApplicationProviderpercentagepaid")
                        .HasColumnType("bit");

                    b.Property<double>("Applicationpercentage")
                        .HasColumnType("float");

                    b.Property<string>("ApplicationpercentageImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Applicationpercentagepaid")
                        .HasColumnType("bit");

                    b.Property<double>("Deposit")
                        .HasColumnType("float");

                    b.Property<int>("FK_ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("FK_UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Providerpercentage")
                        .HasColumnType("float");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("commentNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("copon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<double>("discountPercentage")
                        .HasColumnType("float");

                    b.Property<string>("lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("orderDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("paid")
                        .HasColumnType("bit");

                    b.Property<bool>("payOut")
                        .HasColumnType("bit");

                    b.Property<string>("pdf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<double>("priceBeforeDisc")
                        .HasColumnType("float");

                    b.Property<int>("rate")
                        .HasColumnType("int");

                    b.Property<string>("rateComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("refusedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("returnMoney")
                        .HasColumnType("bit");

                    b.Property<double>("shippingPrice")
                        .HasColumnType("float");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<int>("typePay")
                        .HasColumnType("int");

                    b.Property<double>("valueOfDiscount")
                        .HasColumnType("float");

                    b.Property<double>("valueOfTaxEleklil")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("FK_ProviderID");

                    b.HasIndex("FK_UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Core.TableDb.ProviderAditionalData", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommercialRegisterImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FK_CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("FK_DistrictID")
                        .HasColumnType("int");

                    b.Property<string>("FK_UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HealthCardImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IbanImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IbanNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalonUsersType")
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("commercialRegister")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dayWorks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("descriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("descriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("lastPayDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("paied")
                        .HasColumnType("float");

                    b.Property<int>("rate")
                        .HasColumnType("int");

                    b.Property<int>("salonType")
                        .HasColumnType("int");

                    b.Property<string>("socialMediaProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("timeForm")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("timeFormEvening")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("timeTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("timeToEvening")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("FK_CategoryID");

                    b.HasIndex("FK_DistrictID");

                    b.HasIndex("FK_UserID")
                        .IsUnique()
                        .HasFilter("[FK_UserID] IS NOT NULL");

                    b.ToTable("ProviderAditionalData");
                });

            modelBuilder.Entity("Core.TableDb.SallonEvaluation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("SallonID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("SallonID");

                    b.HasIndex("UserID");

                    b.ToTable("SallonEvaluations");
                });

            modelBuilder.Entity("Core.TableDb.SalonImages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_ProviderAdditionalDataID")
                        .HasColumnType("int");

                    b.Property<string>("img")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FK_ProviderAdditionalDataID");

                    b.ToTable("SalonImages");
                });

            modelBuilder.Entity("Core.TableDb.ServiceDelivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("DeliveryPrice")
                        .HasColumnType("float");

                    b.Property<double>("FromInKM")
                        .HasColumnType("float");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<double>("ToInKM")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServicesDelivery");
                });

            modelBuilder.Entity("Core.TableDb.Settings", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Deposit")
                        .HasColumnType("float");

                    b.Property<int>("ExpireTime")
                        .HasColumnType("int");

                    b.Property<int>("FK_BranchID")
                        .HasColumnType("int");

                    b.Property<string>("Screen1DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Screen1DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Screen1TitleAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Screen1TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Screen2DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Screen2DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Screen2TitleAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Screen2TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Screen3DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Screen3DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Screen3TitleAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Screen3TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Tax")
                        .HasColumnType("float");

                    b.Property<double>("TaxOfHome")
                        .HasColumnType("float");

                    b.Property<string>("aboutAppAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("aboutAppEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("appPrecent")
                        .HasColumnType("float");

                    b.Property<double>("appPrecentPercentage")
                        .HasColumnType("float");

                    b.Property<string>("appleStoreUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("commercialRegister")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("condtionsAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("condtionsEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("googlePlayUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("invitationCodeBallance")
                        .HasColumnType("float");

                    b.Property<string>("keyMap")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("payText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("paymentPolicyAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("paymentPolicyEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("snapChat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("telegram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whatsApp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("youtube")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Core.TableDb.Sliders", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_BranchID")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("Core.TableDb.SubServices", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FK_MainServiceID")
                        .HasColumnType("int");

                    b.Property<int>("FK_ProviderAdditionalDataID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WokerID")
                        .HasColumnType("int");

                    b.Property<double>("duration")
                        .HasColumnType("float");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("nameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("FK_MainServiceID");

                    b.HasIndex("FK_ProviderAdditionalDataID");

                    b.HasIndex("WokerID");

                    b.ToTable("SubServices");
                });

            modelBuilder.Entity("Core.TableDb.Vacation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Vacations");
                });

            modelBuilder.Entity("Core.TableDb.Worker", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttendanceDays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SallonID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("nameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("SallonID");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("Core.TableDb.WorkerEvaluation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WorkerID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.HasIndex("WorkerID");

                    b.ToTable("WorkerEvaluations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Core.TableDb.Appointment", b =>
                {
                    b.HasOne("Core.TableDb.ApplicationDbUser", "Sallon")
                        .WithMany()
                        .HasForeignKey("SallonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.TableDb.ApplicationDbUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.TableDb.Carts", b =>
                {
                    b.HasOne("Core.TableDb.SubServices", "FK_SubService")
                        .WithMany("Carts")
                        .HasForeignKey("FK_SubServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.TableDb.ApplicationDbUser", "FK_User")
                        .WithMany("Carts")
                        .HasForeignKey("FK_UserID");

                    b.HasOne("Core.TableDb.Employees", "Fk_Employee")
                        .WithMany("Carts")
                        .HasForeignKey("Fk_EmployeeID");
                });

            modelBuilder.Entity("Core.TableDb.DeviceIds", b =>
                {
                    b.HasOne("Core.TableDb.ApplicationDbUser", "FK_User")
                        .WithMany("DeviceIds")
                        .HasForeignKey("FK_UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.TableDb.Districts", b =>
                {
                    b.HasOne("Core.TableDb.Cities", "FK_City")
                        .WithMany("Districts")
                        .HasForeignKey("FK_CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.TableDb.Employees", b =>
                {
                    b.HasOne("Core.TableDb.ProviderAditionalData", "FK_ProviderAdditionalData")
                        .WithMany("Employees")
                        .HasForeignKey("FK_ProviderAdditionalDataID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.TableDb.SubServices", "FK_SubService")
                        .WithMany("Employees")
                        .HasForeignKey("FK_SubServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.TableDb.FinancialAccount", b =>
                {
                    b.HasOne("Core.TableDb.ApplicationDbUser", "FKProvider")
                        .WithMany("FinancialAccounts")
                        .HasForeignKey("FkProviderId");
                });

            modelBuilder.Entity("Core.TableDb.HistoryNotify", b =>
                {
                    b.HasOne("Core.TableDb.ApplicationDbUser", "User")
                        .WithMany("HistoryNotify")
                        .HasForeignKey("FKUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.TableDb.MainServices", b =>
                {
                    b.HasOne("Core.TableDb.Categories", "FK_Category")
                        .WithMany("MainServices")
                        .HasForeignKey("FK_CategoryID");
                });

            modelBuilder.Entity("Core.TableDb.Messages", b =>
                {
                    b.HasOne("Core.TableDb.Orders", "FK_Order")
                        .WithMany("Messages")
                        .HasForeignKey("FK_OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.TableDb.ApplicationDbUser", "Receiver")
                        .WithMany("receiver_Messages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.TableDb.ApplicationDbUser", "Sender")
                        .WithMany("sender_Messages")
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("Core.TableDb.Notifications", b =>
                {
                    b.HasOne("Core.TableDb.Orders", "FK_Order")
                        .WithMany("Notifications")
                        .HasForeignKey("FK_OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.TableDb.ApplicationDbUser", "FK_User")
                        .WithMany("Notifications")
                        .HasForeignKey("FK_UserID");
                });

            modelBuilder.Entity("Core.TableDb.Offers", b =>
                {
                    b.HasOne("Core.TableDb.ProviderAditionalData", "FK_ProviderAdditionalData")
                        .WithMany("Offers")
                        .HasForeignKey("FK_ProviderAdditionalDataID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.TableDb.OrderServices", b =>
                {
                    b.HasOne("Core.TableDb.Orders", "FK_Order")
                        .WithMany("OrderServices")
                        .HasForeignKey("FK_OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.TableDb.Orders", b =>
                {
                    b.HasOne("Core.TableDb.ProviderAditionalData", "FK_Provider")
                        .WithMany("Orders")
                        .HasForeignKey("FK_ProviderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.TableDb.ApplicationDbUser", "FK_User")
                        .WithMany("clientOrders")
                        .HasForeignKey("FK_UserID");
                });

            modelBuilder.Entity("Core.TableDb.ProviderAditionalData", b =>
                {
                    b.HasOne("Core.TableDb.Categories", "FK_Category")
                        .WithMany("ProviderAditionalData")
                        .HasForeignKey("FK_CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.TableDb.Districts", "FK_District")
                        .WithMany("ProviderAditionalData")
                        .HasForeignKey("FK_DistrictID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.TableDb.ApplicationDbUser", "FK_User")
                        .WithOne("ProviderAditionalData")
                        .HasForeignKey("Core.TableDb.ProviderAditionalData", "FK_UserID");
                });

            modelBuilder.Entity("Core.TableDb.SallonEvaluation", b =>
                {
                    b.HasOne("Core.TableDb.ApplicationDbUser", "Sallon")
                        .WithMany()
                        .HasForeignKey("SallonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.TableDb.ApplicationDbUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.TableDb.SalonImages", b =>
                {
                    b.HasOne("Core.TableDb.ProviderAditionalData", "FK_ProviderAdditionalData")
                        .WithMany("SalonImages")
                        .HasForeignKey("FK_ProviderAdditionalDataID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.TableDb.ServiceDelivery", b =>
                {
                    b.HasOne("Core.TableDb.MainServices", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("Core.TableDb.SubServices", b =>
                {
                    b.HasOne("Core.TableDb.MainServices", "FK_MainService")
                        .WithMany("SubServices")
                        .HasForeignKey("FK_MainServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.TableDb.ProviderAditionalData", "FK_ProviderAdditionalData")
                        .WithMany("SubServices")
                        .HasForeignKey("FK_ProviderAdditionalDataID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.TableDb.Worker", "Worker")
                        .WithMany("SubServices")
                        .HasForeignKey("WokerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.TableDb.Vacation", b =>
                {
                    b.HasOne("Core.TableDb.ApplicationDbUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.TableDb.Worker", b =>
                {
                    b.HasOne("Core.TableDb.ApplicationDbUser", "Sallon")
                        .WithMany("Workers")
                        .HasForeignKey("SallonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.TableDb.WorkerEvaluation", b =>
                {
                    b.HasOne("Core.TableDb.ApplicationDbUser", "User")
                        .WithMany("WorkerEvaluations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.TableDb.Worker", "Worker")
                        .WithMany("Evaluation")
                        .HasForeignKey("WorkerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core.TableDb.ApplicationDbUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core.TableDb.ApplicationDbUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.TableDb.ApplicationDbUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core.TableDb.ApplicationDbUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
